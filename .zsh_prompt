# Load colors and options
autoload -Uz colors && colors
setopt prompt_subst

reset_color="%{$reset_color%}"

userStyle="%{$bold%}%{$fg[orange]%}"
[[ $USER == root ]] && userStyle="%{$bold%}%{$fg[red]%}"

hostStyle="%{$fg[yellow]%}"
[[ -n "$SSH_TTY" ]] && hostStyle="%{$bold%}%{$fg[red]%}"

pathStyle="%{$fg[green]%}"
promptSymbolStyle="%{$fg[red]%}"

prompt_git() {
  local s='' branchName=''
  if git rev-parse --is-inside-work-tree &>/dev/null; then
    if [[ "$(git rev-parse --is-inside-git-dir 2>/dev/null)" == "false" ]]; then
      git update-index --really-refresh -q &>/dev/null
      ! git diff --quiet --ignore-submodules --cached && s+='+'
      ! git diff-files --quiet --ignore-submodules -- && s+='!'
      [[ -n "$(git ls-files --others --exclude-standard)" ]] && s+='?'
      git rev-parse --verify refs/stash &>/dev/null && s+='$'
    fi
    branchName="$(git symbolic-ref --quiet --short HEAD 2>/dev/null || git rev-parse --short HEAD 2>/dev/null || echo '(unknown)')"
    [[ -n "$s" ]] && s=" [$s]"
    echo "%{${fg[magenta]}%}on %{${fg[cyan]}%}${branchName}%{${fg[blue]}%}${s}%{${reset_color}%}"
  fi
}

PROMPT="${userStyle}%n${reset_color}@${hostStyle}%m${reset_color} ${pathStyle}%~ ${reset_color}\$(prompt_git) ${promptSymbolStyle}%# ${reset_color}"

# Optional: continuation prompt (for multiline commands)
PS2="%{$fg[yellow]%}â†’ %{$reset_color%}"

welcome_msg() {
  local white='%F{white}'
  local bg_cyan='%K{cyan}'
  local bg_violet='%K{magenta}'
  local bg_orange='%K{yellow}'
  local reset='%k%f'

  print -P "${white}${bg_cyan}  GRAY  ${reset}${white}${bg_violet}  YEARGIN  ${reset}${white}${bg_orange}  Brooklyn, NY  ${reset}"
  print "------------------------------------------"
  command -v git &>/dev/null && print "Git: $(git --version)"
  command -v brew &>/dev/null && print "Brew: $(brew -v | head -n1)"
  command -v node &>/dev/null && print -P "${white}${bg_cyan}  NODE $(node --version)  ${reset}"
  command -v npm &>/dev/null && print -P "${white}${bg_violet}  NPM $(npm --version)  ${reset}"
  print "------------------------------------------"
  print "Type ${bold}unwelcome${reset} to remove this message"
}

if [[ -f ~/.welcome_message_enabled ]]; then
  welcome_msg
fi

welcome() {
  touch ~/.welcome_message_enabled
  echo "Message returned."
}

unwelcome() {
  rm -f ~/.welcome_message_enabled
  echo "Message removed."
}
